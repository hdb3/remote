#!/bin/bash
{
#echo "centos:centos" | sudo chpasswd
mkdir log || :
yum list installed > log/packages-init
env > log/env-init
set -e
set +vx # xtrace/verbose off
set -vx # xtrace/verbose on
mkdir -p /tmp/install_lock
set -a # this ensures the variables set in the next step are exported to subsequent commands...
test -f config || exit 1
test -f roles || exit 1
source config
if [ -n "$WWWPROXY" ]
  then
    grep "proxy=" /etc/yum.conf || sed -i "/^\[main\]/a proxy=$WWWPROXY" /etc/yum.conf
fi
# fix for disable IPv6 DNS in yum
grep "ip_resolve" /etc/yum.conf || sed -i "/^\[main\]/a ip_resolve=4" /etc/yum.conf
if [ -n "$LOCALREPO" ]
  then
    sudo rm -rf /etc/yum.repos.d/*
    sudo cp local.repo /etc/yum.repos.d/
  else
    sudo yum -q  -y install epel-release deltarpm
fi
# these packages are needed on ALL openstack nodes, for installation, operation or testing
# yum -y install yum-plugin-priorities
if [ -n "$VIRTUAL_HOST" ]
  then
yum -y remove microcode_ctl
fi
yum -y install epel-release yum-plugin-priorities centos-release-openstack-mitaka
yum -y upgrade
yum -y install python-netifaces python-ipaddress python2-colorama patch crudini # installer
yum -y install wireshark nmap fping # diagnostics
yum -y install ntp python-openstackclient mariadb MySQL-python
# the following code is specific to RHEL/Centos based systems which need to use DHCP to acquire addresess on secondary network interfaces,
# and where those interfaces have the canonical names 'eth0', 'eth1, 'eth2', etc
# this is typically only the case for  virtualised (nested test envioronments).
# a more generic solution should attempt to discover physical interfaces which do not have corresponding persistent configuration files
# and then build configuration files based on both the interface name/physical address and also the ditsribution class

if [ -n "$PROBE_INTERFACES" ] ; then
grep DEFROUTE /etc/sysconfig/network-scripts/ifcfg-eth0 || echo "DEFROUTE=yes" >> /etc/sysconfig/network-scripts/ifcfg-eth0
for intf in eth1 eth2
do
  if ip li|grep -q $intf
  then
    echo "$intf found"
    cp -n /etc/sysconfig/network-scripts/ifcfg-eth0 "/etc/sysconfig/network-scripts/ifcfg-$intf" && sed -i -e "/DEVICE/s/eth0/$intf/" "/etc/sysconfig/network-scripts/ifcfg-$intf"
    if grep -q DEFROUTE "/etc/sysconfig/network-scripts/ifcfg-$intf"
    then
      sed -i -e "/DEFROUTE/s/yes/no/" "/etc/sysconfig/network-scripts/ifcfg-$intf"
    else
      echo "DEFROUTE=no" >> "/etc/sysconfig/network-scripts/ifcfg-$intf"
    fi
    ifup "$intf"
  else
    echo "no $intf found"
  fi
done

# this should not be necessaary! but for some reaon the "DEFROUTE=no" seems not to work in every case!
# I suspect that if the DHCP server gives an explicit g/w then this option is ignored
# i.e. only if the client DHCP is inferring a g/w where none is given will this affect the behaviour....
ifdown eth0 ; ifup eth0

# # this is the old version of the dynamic interface address managment code
# # remove once it is clear that it is not better than the new version above....
# # ip route show | grep default > defroute
# # sudo dhclient eth1
# # sudo ip link set dev eth2 up
# # sudo dhclient -x eth2
# # sudo ip route change $(cat defroute)
set -e
 # need to know how many interfaces are really needed - aimed at virtualised hosts really...
# this is so that subsequent subnet probes find assigned IP addresses
fi

$(./role.py)
if [[ $OPENSTACK_INSTALL == "yes" ]] ; then
  echo "Local configuration detected and valid role found"
  echo "Will now commence installation"
else
  echo -e "\e[31mNo local configuration detected or no valid role found"
  echo -e "Will abort installation\e[0m"
  exit
fi
source services
sudo systemctl stop $NETWORK_SERVICES $COMPUTE_SERVICES $CONTROLLER_SERVICES || :
for project in keystone glance cinder nova neutron
do
  rm -rf /var/log/$project
  rm -rf /etc/$project
done
rm -rf /usr/share/openstack-dashboard /etc/openstack-dashboard/
sudo -E bash -evx package.sh
if [ -n "$CALICO" ]; then sudo -E bash -evx calico-package.sh ; fi
yum list installed > log/packages-final
env > log/env-final
set -vx # xtrace
sudo -E bash -evx preflight.sh
if [[ $MY_ROLE =~ "controller" ]] ; then
  echo "running controller node setup"
  sudo -E bash -evx mysql.sh
  sudo -E bash -evx keystone.sh
  sudo -E bash -evx cinder.sh
  sudo -E bash -evx glance.sh
  if [ -n "$INSTALL_HORIZON" ]; then sudo -E bash -evx horizon.sh ; fi
fi
sudo -E bash -evx nova.sh
sudo -E bash -evx neutron.sh
if [ -n "$ODL_IP" ]; then bash -evx odl.sh ; elif
   [ -n "$CALICO" ]; then sudo -E bash -evx calico.sh ; fi
}
rmdir /tmp/install_lock
echo "all complete... :-)"
