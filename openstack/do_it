#!/bin/bash
{
echo "centos:centos" | sudo chpasswd
set +e
mkdir -p /tmp/install_lock

set -a # this ensures the variables set in the next step are exported to subsequent commands...
source config
if [ -n "$LOCALREPO" ]
  then
    sudo rm -rf /etc/yum.repos.d/*
    sudo cp local.repo /etc/yum.repos.d/
  else
    sudo yum -q  -y install epel-release deltarpm
fi
# the following code is specific to RHEL/Centos based systems which need to use DHCP to acquire addresess on secondary network interfaces,
# and where those interfaces have the canonical names 'eth0', 'eth1, 'eth2', etc
# this is typically only the case for  virtualised (nested test envioronments).
# a more generic solution should attempt to discover physical interfaces which do not have corresponding persistent configuration files
# and then build configuration files based on both the interface name/physical address and also the ditsribution class
grep DEFROUTE /etc/sysconfig/network-scripts/ifcfg-eth0 || echo "DEFROUTE=yes" >> /etc/sysconfig/network-scripts/ifcfg-eth0
for intf in eth1 eth2
do
  if ip li|grep -q $intf
  then
    echo "$intf found"
    cp -n /etc/sysconfig/network-scripts/ifcfg-eth0 "/etc/sysconfig/network-scripts/ifcfg-$intf" && sed -i -e "/DEVICE/s/eth0/$intf/" "/etc/sysconfig/network-scripts/ifcfg-$intf"
    if grep -q DEFROUTE "/etc/sysconfig/network-scripts/ifcfg-$intf"
    then
      sed -i -e "/DEFROUTE/s/yes/no/" "/etc/sysconfig/network-scripts/ifcfg-$intf"
    else
      echo "DEFROUTE=no" >> "/etc/sysconfig/network-scripts/ifcfg-$intf"
    fi
    ifup "$intf"
  else
    echo "no $intf found"
  fi
done

# this should not be necessaary! but for some reaon the "DEFROUTE=no" seems not to work in every case!
# I suspect that if the DHCP server gives an explicit g/w then this option is ignored
# i.e. only if the client DHCP is inferring a g/w where none is given will this affect the behaviour....
ifdown eth0 ; ifup eth0

# # this is the old version of the dynamic interface address managment code
# # remove once it is clear that it is not better than the new version above....
# # ip route show | grep default > defroute
# # sudo dhclient eth1
# # sudo ip link set dev eth2 up
# # sudo dhclient -x eth2
# # sudo ip route change $(cat defroute)
set -e
 # need to know how many interfaces are really needed - aimed at virtualised hosts really...
# this is so that subsequent subnet probes find assigned IP addresses
sudo yum -q  -y install python-netifaces python-pip # python-ipaddress python-colorama # colorama and ipaddress not available in Centos7 epel?
sudo pip install py2-ipaddress colorama # not needed if the RPMs have the packages...
$(./role.py)
if [[ $OPENSTACK_INSTALL == "yes" ]] ; then
  echo "Local configuration detected and valid role found"
  echo "Will now commence installation"
else
  echo -e "\e[31mNo local configuration detected or no valid role found"
  echo -e "Will abort installation\e[0m"
  exit
fi
if [ -n "$CALICO" ]; then sudo -E bash -ev calico-package.sh ; fi
sudo -E bash -ev package.sh
source services
sudo systemctl stop $NETWORK_SERVICES $COMPUTE_SERVICES $CONTROLLER_SERVICES
sudo -E bash -ev preflight.sh
if [[ $MY_ROLE =~ "controller" ]] ; then
  echo "running controller node setup"
  sudo -E bash -ev mysql.sh
  sudo -E bash -ev keystone.sh
  sudo -E bash -ev glance.sh
  sudo -E bash -ev cinder.sh
  if [ -n "$INSTALL_HORIZON" ]; then sudo -E bash -ev horizon.sh ; fi
fi
sudo -E bash -ev nova.sh
sudo -E bash -ev neutron.sh
if [ -n "$ODL_IP" ]; then bash -ev odl.sh ; elif
   [ -n "$CALICO" ]; then sudo -E bash -ev calico.sh ; fi
}
rmdir /tmp/install_lock
echo "all complete... :-)"
